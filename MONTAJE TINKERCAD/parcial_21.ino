#include <Adafruit_NeoPixel.h>
int neopixelPin = 2;
int no_ofPixels = 256;
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(no_ofPixels, neopixelPin, NEO_GRB + NEO_KHZ800);

//////////AGREGAR AC√Å LO QUE ENTREGA EL CODIGO DE QT//////////////////////////////

//Bandera Brasil
/*
byte reds[256] = {64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,
64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,
64,64,64,64,64,64,64,253,253,64,64,64,64,64,64,64,
64,64,64,64,64,64,253,253,253,253,64,64,64,64,64,64,
64,64,64,64,64,253,253,12,12,253,253,64,64,64,64,64,
64,64,64,64,253,253,12,12,12,12,253,253,64,64,64,64,
64,64,64,253,253,253,255,12,12,12,12,253,253,64,64,64,
64,64,253,253,253,12,12,12,255,12,12,253,253,253,64,64,
64,64,253,253,253,12,12,12,12,12,255,253,253,253,64,64,
64,64,64,253,253,12,12,12,12,12,253,253,253,64,64,64,
64,64,64,64,253,253,12,12,12,12,253,253,64,64,64,64,
64,64,64,64,64,253,253,12,12,253,253,64,64,64,64,64,
64,64,64,64,64,64,253,253,253,253,64,64,64,64,64,64,
64,64,64,64,64,64,64,253,253,64,64,64,64,64,64,64,
64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,
64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64};


byte greens[256] = {140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,
140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,
140,140,140,140,140,140,140,223,223,140,140,140,140,140,140,140,
140,140,140,140,140,140,223,223,223,223,140,140,140,140,140,140,
140,140,140,140,140,223,223,82,82,223,223,140,140,140,140,140,
140,140,140,140,223,223,82,82,82,82,223,223,140,140,140,140,
140,140,140,223,223,223,255,82,82,82,82,223,223,140,140,140,
140,140,223,223,223,82,82,82,255,82,82,223,223,223,140,140,
140,140,223,223,223,82,82,82,82,82,255,223,223,223,140,140,
140,140,140,223,223,223,82,82,82,82,223,223,223,140,140,140,
140,140,140,140,223,223,82,82,82,82,223,223,140,140,140,140,
140,140,140,140,140,223,223,82,82,223,223,140,140,140,140,140,
140,140,140,140,140,140,223,223,223,223,140,140,140,140,140,140,
140,140,140,140,140,140,140,223,223,140,140,140,140,140,140,140,
140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,
140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140};


byte blues[256] = {65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,
65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,
65,65,65,65,65,65,65,1,1,65,65,65,65,65,65,65,
65,65,65,65,65,65,1,1,1,1,65,65,65,65,65,65,
65,65,65,65,65,1,1,131,131,1,1,65,65,65,65,65,
65,65,65,65,1,1,131,131,131,131,1,1,65,65,65,65,
65,65,65,1,1,1,255,131,131,131,131,1,1,65,65,65,
65,65,1,1,1,131,131,131,255,131,131,1,1,1,65,65,
65,65,1,1,1,131,131,131,131,131,255,1,1,1,65,65,
65,65,65,1,1,1,131,131,131,131,1,1,1,65,65,65,
65,65,65,65,1,1,131,131,131,131,1,1,65,65,65,65,
65,65,65,65,65,1,1,131,131,1,1,65,65,65,65,65,
65,65,65,65,65,65,1,1,1,1,65,65,65,65,65,65,
65,65,65,65,65,65,65,1,1,65,65,65,65,65,65,65,
65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,
65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65};
*/

//Bandera COLOMBIA
byte reds[256] = {253,253,253,253,252,253,253,253,252,253,252,253,252,252,252,252,
253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,
253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,
253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,
253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,
253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,
253,253,253,252,253,253,253,253,253,253,253,253,253,253,253,253,
253,252,252,253,252,252,252,252,253,252,253,252,252,253,253,252,
1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,
206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,
206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,
206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206};


byte greens[256] = {209,209,209,209,208,209,209,209,208,209,208,209,208,208,208,208,
209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,
209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,
209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,
209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,
209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,
209,209,208,208,208,209,208,209,208,208,208,208,208,208,208,208,
209,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,
56,56,56,56,56,56,56,56,55,56,56,56,56,56,56,56,
56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,
56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,
56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,
17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17};


byte blues[256] = {22,22,22,22,21,22,22,22,21,22,21,22,21,21,21,21,
22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,
22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,
22,22,21,21,21,22,21,22,21,21,21,21,21,21,21,21,
22,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,
147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,
147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,
147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,
147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,
39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,
39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,
39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,
39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39};
/////////////////////////////////////////////////////////////////////////////////////


void setup() {
  //inicializamos
  pixels.begin();
  
  for (int i=0;i<no_ofPixels;i++){
    if(reds[i]==greens[i] && reds[i]==blues[i]){//si los valores de RGB son iguales debemos tener eso en cuenta
      if(reds[i]>0) //si son mayores a 0, le restamos 1 al rojo
        pixels.setPixelColor(i, reds[i]-1, greens[i],blues[i]);
      else //si son 0, le sumamos 1 al rojo
        pixels.setPixelColor(i, reds[i]+1, greens[i],blues[i]);
    }
  else //en caso de que no se cumpla ninguna de lsa condiciones hacemos la muestra de forma normal
    pixels.setPixelColor(i, reds[i], greens[i],blues[i]);
  }
  //encendemos todos los leds despues hacer la carga de los valores
  pixels.show();  
}

void loop(){
  
}